;; Comentary:
;; This code includes the ability to move the box around the screen with an approximation of
;; the box pushing fluids around the screen. The speed can be altered in the move_body function
;; and the way the box pushes the fluid around can be altered in the displacefluid function

(sys:load "libs/external/glfw3.xtm")
(sys:load "5-curved-boundaries/fluids-5-curved-boundaries.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

;; set up some variables for the OpenGL pipeline

;; this version uses an inverted y axis from the one in gl-objects.xtm
(bind-func VAO_create_ss_quad
  (lambda ()
    (let ((ss_quad_pos_st:float* (salloc 16)))
      (pfill! ss_quad_pos_st
              ;; pos     tex_coord
              -1. -1.    0. 1.
              -1.  1.    0. 0.
              1. -1.    1. 1.
              1.  1.    1. 0.
              )
      (let ((vbo (VBO_create ss_quad_pos_st 16))
            (vao (VAO_create)))
        (VAO_bind_attribute vao vbo 0 2 4 0) ;; position
        (VAO_bind_attribute vao vbo 1 2 4 2) ;; tex_coord
        vao))))

(bind-val tex Texture (Texture_create))
(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val sp ShaderProgram
  (ShaderProgram_create
   (sys_slurp_file "5-curved-boundaries/texture.vert")
   (sys_slurp_file "5-curved-boundaries/texture.frag")))

($ (set! sp (ShaderProgram_create
            (sys_slurp_file "5-curved-boundaries/texture.vert")
            (sys_slurp_file "5-curved-boundaries/texture.frag"))))

(bind-func move_body
  (lambda (body:SolidBody* window:GLFWwindow* fs:FluidSolver*)
    void))

(bind-func runsimulation
  (lambda (time:i64 delta_t:double solver:FluidSolver*)
    (let ((densityAir .1) (densitySoot:double 1.) (diffusion:double 0.01) (timestep 0.005))
    ;(bodies (list (SolidBox 0.5 0.6 0.1 0.1 (* PI .0) 0.0 0.0 0.0))))
    ;(tset! solver 15 bodies)
    (tset! solver 6 densityAir)
    (addInFlow solver 0.35 0.1 0.3 0.2 1.0 0.0 1.0)
    (updatefs solver timestep))))

(bind-func gl_draw_loop
  (let ((sizex 128)
        (sizey sizex)
        (bodies (list (SolidBox 0.5 0.5 .1 .1 0. 0. 0. 0.)))
        (solver (FluidSolver sizex sizey 0.0 bodies)) (iteration 0)
        (imagedata:float* (alloc (* sizex sizey))))
    (lambda (time:i64 delta_t:double)
      (glfwPollEvents)
      (move_body (car (tref solver 15)) window solver)
      (runsimulation time delta_t solver)
      ;; draw the world
      (glClear GL_COLOR_BUFFER_BIT)
      (let ((texloc (glGetUniformLocation sp "tex")))
        (glUseProgram sp)
        (glUniform1i texloc 0))
      ;; copy the double density data into the float buffer (since OpenGL prefers floats to doubles)
      (doloop (j (* sizex sizey))
        (pset! imagedata j (convert (pref (fsd solver) j)))
        (if (= CELL_SOLID (convert (pref (tref (tref solver 0) 9) j)))
            (pset! imagedata j 0.9)))
      (Texture_bind_data tex imagedata sizex sizey 1 GL_CLAMP_TO_EDGE GL_NEAREST)
      (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
      (glfwSwapBuffers window)
      (set! iteration (+ 1 iteration))
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time gl_draw_loop next_time delta_t)))))

(gl_draw_loop (now) (/ 1. 60.))

(bind-func move_body
    (lambda (body:SolidBody* window:GLFWwindow* fs:FluidSolver*)
    (let ((speed (tref fs 5)))
        (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_LEFT))
          (begin
            (displacefluid fs 0)
            (tset! body 0 (- (tref body 0) speed))))
        (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_RIGHT))
          (begin
            (displacefluid fs 1)
            (tset! body 0 (+ (tref body 0) speed))))
        (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_DOWN))
          (begin
            (displacefluid fs 2)
            (tset! body 1 (+ (tref body 1) speed))))
        (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_UP))
          (begin
            (displacefluid fs 3)
            (tset! body 1 (- (tref body 1) speed))))
        void)))
