;; Commentary:
;; This example includes the ability to add both heat and in flows using the cursor and left
;; or right shift respectively. All the values that are added can be changed during the simulation

(sys:load "libs/external/glfw3.xtm")
(sys:load "6-heat/fluids-6-heat.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

;; set up some variables for the OpenGL pipeline

;; this version uses an inverted y axis from the one in gl-objects.xtm
(bind-func VAO_create_ss_quad
  (lambda ()
    (let ((ss_quad_pos_st:float* (salloc 16)))
      (pfill! ss_quad_pos_st
              ;; pos     tex_coord
              -1. -1.    0. 1.
              -1.  1.    0. 0.
              1. -1.    1. 1.
              1.  1.    1. 0.
              )
      (let ((vbo (VBO_create ss_quad_pos_st 16))
            (vao (VAO_create)))
        (VAO_bind_attribute vao vbo 0 2 4 0) ;; position
        (VAO_bind_attribute vao vbo 1 2 4 2) ;; tex_coord
        vao))))

(bind-val tex Texture (Texture_create))
(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val sp ShaderProgram
  (ShaderProgram_create
   (sys_slurp_file "examples/external/shader-tutorials/texture.vert")
   (sys_slurp_file "examples/external/shader-tutorials/texture.frag")))

(bind-func cursoraddInflow
  (lambda (solver:FluidSolver* window:i8*)
  (let ((xpos:double* (alloc)) (ypos:double* (alloc)))
    (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_RIGHT_SHIFT))
     (begin
        (glfwGetCursorPos window xpos ypos)
        (pset! xpos 0 (/ (pref xpos 0) 800.))
        (pset! ypos 0 (/ (pref ypos 0) 600.))
        (addInFlow solver (- (pref xpos 0) .05) (- (pref ypos 0) .05) 0.1 0.1 1.0 (+ (tref solver 20) 100.) 0. 0.)
        (printf "Fluid added at %d,%d\n" (convert (* (pref xpos 0) 128.) i32) (convert (* (pref ypos 0) 128.) i32))))
        void)))

(bind-func addcursorheat
 (lambda (fs:FluidSolver* window:i8*)
   (let ((xpos:double* (alloc)) (ypos:double* (alloc))
        (ixpos:i32 0) (iypos:i32 0) (idx:i32 0) (temp (tref fs 16))
        (increase 100.))
    (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_LEFT_SHIFT))
     (begin
           (glfwGetCursorPos window xpos ypos)
           (set! ixpos (convert (/ (pref xpos 0) 6.25) i32))
           (set! iypos (convert (/ (pref ypos 0) 4.6875) i32))
           (pset! (tref temp 0) (+ (+ ixpos 1) (+ 1 (* (tref fs 3) iypos))) increase)
           (pset! (tref temp 0) (+ (+ ixpos 1) (- (* (tref fs 3) iypos) 1)) increase)
           (pset! (tref temp 0) (+ (+ ixpos 1) (* (tref fs 3) iypos)) increase)
           (pset! (tref temp 0) (+ ixpos (+ 1 (* (tref fs 3) iypos))) increase)
           (pset! (tref temp 0) (+ ixpos (- (* (tref fs 3) iypos) 1)) increase)
           (pset! (tref temp 0) (+ ixpos (* (tref fs 3) iypos)) increase)
           (pset! (tref temp 0) (+ (- ixpos 1) (+ 1 (* (tref fs 3) iypos))) increase)
           (pset! (tref temp 0) (+ (- ixpos 1) (- (* (tref fs 3) iypos) 1)) increase)
           (pset! (tref temp 0) (+ (- ixpos 1) (* (tref fs 3) iypos)) increase)
           (printf "Heat added around %d,%d\n" ixpos iypos)))
    void)))

($ (set! sp (ShaderProgram_create
            (sys_slurp_file "6-heat/texture.vert")
            (sys_slurp_file "6-heat/texture.frag"))))

(bind-func runsimulation
  (lambda (time:i64 delta_t:double solver:FluidSolver*)
    (let ((densityAir 0.1) (densitySoot 2.) (diffusion 0.3) (timestep 0.005)
    (bodies (list (SolidBox 0.0 0.6 0.0 0.0 (* PI .25) 0.0 0.0 0.0))))
    (tset! solver 15 bodies)
    (tset! solver 17 densityAir)
    (tset! solver 18 densitySoot)
    (tset! solver 19 diffusion)
    (addInFlow solver 0.45 0.2 0.1 0.05 1.0 (tref solver 20) 0.0 1.0)
    (glfwPollEvents)
    (addcursorheat solver window)
    (cursoraddInflow solver window)
    (updatefs solver timestep))))

(bind-func gl_draw_loop
  (let ((sizex 128)
        (sizey sizex)
        (solver (FluidSolver sizex sizey null 0.0 0.0 0.0))
        (imagedata:float* (alloc (* sizex sizey))))
    (lambda (time:i64 delta_t:double)
      (runsimulation time delta_t solver)
      ;; draw the world
      (glClear GL_COLOR_BUFFER_BIT)
      (let ((texloc (glGetUniformLocation sp "tex")))
        (glUseProgram sp)
        (glUniform1i texloc 0))
      ;; copy the double density data into the float buffer (since OpenGL prefers floats to doubles)
      (doloop (j (* sizex sizey))
        (pset! imagedata j (convert (pref (fsd solver) j)))
        (if (= CELL_SOLID (convert (pref (tref (tref solver 0) 9) j)))
            (pset! imagedata j 0.9)))
      (Texture_bind_data tex imagedata sizex sizey 1 GL_CLAMP_TO_EDGE GL_NEAREST)
      (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
      (glfwSwapBuffers window)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time gl_draw_loop next_time delta_t)))))

(gl_draw_loop (now) (/ 1. 60.))
